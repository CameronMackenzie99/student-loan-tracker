import { type NextPage } from "next";
import Head from "next/head";
// import { signIn, signOut, useSession } from "next-auth/react";
import type { SubmitHandler } from "react-hook-form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { api } from "../utils/api";
import { useState } from "react";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import type { YearRow } from "../server/api/routers/modelling";

const Home: NextPage = () => {
  const [formData, setFormData] = useState<FormType>();

  return (
    <>
      <Head>
        <title>Student Loan Tracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#02096d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Student <span className="text-[hsl(216,92%,76%)]">Loan</span>{" "}
            Tracker
          </h1>
          <div className="flex gap-4 sm:grid-cols-2 md:gap-8">
            <LoanForm setFormData={setFormData} />
            {formData && (
              <LoanTable
                loanBalance={formData?.loanBalance}
                graduatingYear={formData?.graduatingYear}
              />
            )}
          </div>
          {/* <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div> */}
        </div>
      </main>
    </>
  );
};

export default Home;

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };

export const FormSchema = z.object({
  loanBalance: z.coerce.number().positive(),
  graduatingYear: z.coerce
    .number()
    .min(1980)
    .max(new Date().getFullYear() + 10),
});

export type FormType = z.infer<typeof FormSchema>;

type FormProps = {
  setFormData: React.Dispatch<React.SetStateAction<FormType | undefined>>;
};

const LoanForm = ({ setFormData }: FormProps) => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<FormType>({
    resolver: zodResolver(FormSchema),
  });

  const onSubmit: SubmitHandler<FormType> = (data) => setFormData(data);

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className="flex flex-col items-center justify-center space-y-4 md:space-y-6"
    >
      <div>
        <label
          htmlFor="loanBalance"
          className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
        >
          Current Loan Balance:
        </label>
        <input
          type="number"
          id="loanBalance"
          placeholder="Â£"
          className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-gray-900 sm:text-sm"
          {...register("loanBalance")}
        />
        {errors.loanBalance && (
          <span className="mt-2 block text-red-800">
            {errors.loanBalance?.message}
          </span>
        )}
      </div>
      <div>
        <label
          htmlFor="graduatingYear"
          className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
        >
          Graduating Year:
        </label>
        <input
          type="datetime"
          id="graduatingYear"
          placeholder="2023"
          className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-gray-900 sm:text-sm"
          {...register("graduatingYear")}
        />
        {errors.graduatingYear && (
          <span className="mt-2 block text-red-800">
            {errors.graduatingYear?.message}
          </span>
        )}
      </div>

      <input type="submit" className="bg-white p-2" disabled={isSubmitting} />
    </form>
  );
};

function formatCurrency(rawAmount: number) {
  return rawAmount.toLocaleString("en-GB", {
    style: "currency",
    currency: "GBP",
    minimumFractionDigits: 2,
  });
}

const LoanTable = (form: FormType) => {
  const { data, isLoading: dataLoading } =
    api.modelling.modelLoanValue.useQuery(form);

  const dataArray = !data ? [] : [data];
  console.log(dataArray);

  const tableData = !data ? [] : data;

  const columnHelper = createColumnHelper<YearRow>();

  const columns = [
    columnHelper.accessor("currentLoanYear", {
      header: () => "Loan Year",
      cell: (info) => info.getValue(),
    }),
    columnHelper.accessor("calendarYear", {
      header: () => "Year",
      cell: (info) => info.getValue(),
    }),
    columnHelper.accessor("adjustedSalary", {
      header: () => "Salary",
      cell: (info) => formatCurrency(info.getValue()),
    }),
    columnHelper.accessor("interestRate", {
      header: () => "Interest Rate",
      cell: (info) => `${info.getValue()} %`,
    }),
    columnHelper.accessor("totalDebt", {
      header: () => "Total Debt",
      cell: (info) => formatCurrency(info.getValue()),
    }),
    columnHelper.accessor("annualInterest", {
      header: () => "Annual Interest",
      cell: (info) => formatCurrency(info.getValue()),
    }),
    columnHelper.accessor("repaymentThreshold", {
      header: () => "Repayment Threshold",
      cell: (info) => formatCurrency(info.getValue()),
    }),
    columnHelper.accessor("annualRepayment", {
      header: () => "Annual Repayment",
      cell: (info) => formatCurrency(info.getValue()),
    }),
    columnHelper.accessor("totalRepaid", {
      header: () => "Total Repaid",
      cell: (info) => formatCurrency(info.getValue()),
    }),
    columnHelper.accessor("yearsUntilWiped", {
      header: () => "Years until wiped",
      cell: (info) => info.getValue(),
    }),
  ];

  const table = useReactTable({
    data: tableData,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  if (dataLoading) return <div>Loading...</div>;

  console.log("data?", data);

  return (
    <>
      <div
        className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-gray-900 sm:text-sm"
        id="result"
      >
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider text-gray-500">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody className="divide-y divide-gray-200">
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id}>
                {row.getVisibleCells().map((cell) => (
                  <td
                    key={cell.id}
                    className="whitespace-nowrap px-4 py-2 text-center"
                  >
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
          <tfoot>
            {table.getFooterGroups().map((footerGroup) => (
              <tr key={footerGroup.id}>
                {footerGroup.headers.map((header) => (
                  <th key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.footer,
                          header.getContext()
                        )}
                  </th>
                ))}
              </tr>
            ))}
          </tfoot>
        </table>
      </div>
    </>
  );
};
